#version 330 core
out vec4 FragColor;

struct Material {
    sampler2D texture_diffuse0;
    sampler2D texture_specular0; 
    bool texture_diffuse0_exist;
    bool texture_specular0_exist; 
    vec4 texture_diffuse_color;
    vec4 texture_specular_color;
    float shininess;
}; 

struct Light {
    vec3 position;
    vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    bool pointlight;
};

in vec3 FragPos;  
in vec3 Normal;  
in vec2 TexCoords;
  
uniform vec3 viewPos;
uniform Material material;
uniform Light light;

void main()
{
    // ambient
    vec3 ambient;
    if(material.texture_diffuse0_exist)ambient = light.ambient * texture(material.texture_diffuse0, TexCoords).rgb;
    else ambient = light.ambient * material.texture_diffuse_color.rgb;
    // diffuse 

    vec3 norm = normalize(Normal);
    vec3 lightDir;
    
    if(light.pointlight)lightDir = normalize(light.position - FragPos);
    else lightDir = normalize(light.direction);

    float diff = max(dot(norm, lightDir), 0.0);

    vec3 diffuse;
    if(material.texture_diffuse0_exist)diffuse = light.diffuse * diff * texture(material.texture_diffuse0, TexCoords).rgb;  
    else diffuse = light.diffuse * diff * material.texture_diffuse_color.rgb;

    // specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    vec3 specular;
    if(material.texture_specular0_exist)specular=light.specular * spec * texture(material.texture_specular0,TexCoords).rgb;  
    else specular = light.specular * spec * material.texture_specular_color.rgb;

    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, material.texture_diffuse_color.a);
} 